// #[derive(Debug, Component)]
// struct Velocity {
//     pub value: Vec3
// }

impl Plugin for velocity {
    pub fn build (&self, app: &mut App) {
        app.add_systems(Startup,update_position)
    }
} 

// // System Query
// fn update_position(mut query: Query<(&Velocity, &mut Transform)>) {
//     for (velocity, mut position) in query.iter_mut() {
//         position.translation.x += velocity.value.x;
//         position.translation.y += velocity.value.y;
//         position.translation.z += velocity.value.z;
//     }
// }

// fn print_position(query: Query<(Entity, &Transform)>) {
//     for (entity, transform) in query.iter() {
//         info!("Entity {:?} is at pos {:?}", entity, transform.translation)
//     }
// }
